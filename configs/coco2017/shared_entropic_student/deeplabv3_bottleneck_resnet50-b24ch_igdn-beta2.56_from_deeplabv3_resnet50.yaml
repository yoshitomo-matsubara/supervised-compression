datasets:
  coco2017:
    name: &dataset_name 'coco2017'
    type: 'cocodetect'
    root: &root_dir !join ['~/dataset/', *dataset_name]
    splits:
      train:
        dataset_id: &coco_train !join [*dataset_name, '/train']
        images: !join [*root_dir, '/train2017']
        annotations: !join [*root_dir, '/annotations/instances_train2017.json']
        annotated_only: True
        is_segment: True
        random_horizontal_flip: 0.5
        transforms_params:
          - type: 'CustomRandomResize'
            params:
              min_size: 260
              max_size: 1040
          - type: 'CustomRandomHorizontalFlip'
            params:
              p: 0.5
          - type: 'CustomRandomCrop'
            params:
              size: 480
          - &totensor
            type: 'CustomToTensor'
            params:
          - &normalize
            type: 'CustomNormalize'
            params:
              mean: [0.485, 0.456, 0.406]
              std: [0.229, 0.224, 0.225]
      val:
        dataset_id: &coco_val !join [*dataset_name, '/val']
        images: !join [*root_dir, '/val2017']
        annotations: !join [*root_dir, '/annotations/instances_val2017.json']
        annotated_only: False
        is_segment: True
        transforms_params:
          - type: 'CustomRandomResize'
            params:
              min_size: 520
              max_size: 520
          - *totensor
          - *normalize

models:
  teacher_model:
    name: &teacher_model_name 'deeplabv3_resnet50'
    params:
      pretrained: True
      progress: True
      aux_loss: True
    experiment: &teacher_experiment !join [ *dataset_name, '-', *teacher_model_name ]
    ckpt: !join [ './resource/ckpt/coco2017/teacher/', *teacher_experiment, '.pt' ]
  student_model:
    name: &student_model_name 'deeplabv3_bottleneck_resnet50'
    params:
      pretrained: True
      progress: True
      pretrained_backbone: True
      aux_loss: True
      backbone:
        name: 'BottleneckResNetBackbone'
        params:
          bottleneck_config:
            name: 'BottleneckResNetLayerWithIGDN'
            params:
              num_enc_channels: &bch 24
              num_target_channels: 256
              analysis_config:
                mean_std_file_size: True
        base_model_name: 'resnet50'
        base_model_config:
          num_classes: 1000
          pretrained: True
          replace_stride_with_dilation: [False, True, True]
        update: True
        ckpt: !join [ './resource/ckpt/ilsvrc2012/entropic_student/ilsvrc2012-bottleneck_resnet50-b', *bch, 'ch_igdn-beta2.56_from_resnet50.pt' ]
    experiment: &student_experiment !join [*dataset_name, '-', *student_model_name, '-b', *bch, 'ch_igdn-beta2.56_from_', *teacher_model_name]
    ckpt: !join ['./resource/ckpt/coco2017/shared_entropic_student/', *student_experiment, '.pt']

train:
  log_freq: 1000
  epoch_to_update: 0
  stage1:
    num_epochs: &num_epochs 5
    train_data_loader:
      dataset_id: *coco_train
      random_sample: True
      batch_size: 8
      num_workers: 16
      collate_fn: 'coco_seg_collate_fn'
      cache_output:
    val_data_loader:
      dataset_id: *coco_val
      random_sample: False
      batch_size: 1
      num_workers: 16
      collate_fn: 'coco_seg_eval_collate_fn'
    teacher:
      adaptations:
      sequential: ['backbone']
      forward_hook:
        input: []
        output: ['backbone.layer1', 'backbone.layer2', 'backbone.layer3', 'backbone.layer4']
      wrapper: 'DistributedDataParallel'
      requires_grad: False
    student:
      adaptations:
      sequential: ['backbone']
      frozen_modules: ['backbone.bottleneck_layer.encoder', 'backbone.bottleneck_layer.entropy_bottleneck', 'backbone.layer3', 'backbone.layer4']
      forward_hook:
        input: []
        output: ['backbone.bottleneck_layer', 'backbone.layer2', 'backbone.layer3', 'backbone.layer4']
      wrapper: 'DistributedDataParallel'
      requires_grad: True
    apex:
      requires: False
      opt_level: '01'
    optimizer:
      type: 'Adam'
      params:
        lr: 0.001
    scheduler:
      type: 'MultiStepLR'
      params:
        milestones: [3]
        gamma: 0.1
    criterion:
      type: 'GeneralizedCustomLoss'
      org_term:
        factor: 0.0
      sub_terms:
        layer1:
          criterion:
            type: 'MSELoss'
            params:
              reduction: 'sum'
          params:
            input:
              is_from_teacher: False
              module_path: 'backbone.bottleneck_layer'
              io: 'output'
            target:
              is_from_teacher: True
              module_path: 'backbone.layer1'
              io: 'output'
          factor: 1.0
        layer2:
          criterion:
            type: 'MSELoss'
            params:
              reduction: 'sum'
          params:
            input:
              is_from_teacher: False
              module_path: 'backbone.layer2'
              io: 'output'
            target:
              is_from_teacher: True
              module_path: 'backbone.layer2'
              io: 'output'
          factor: 1.0
        layer3:
          criterion:
            type: 'MSELoss'
            params:
              reduction: 'sum'
          params:
            input:
              is_from_teacher: False
              module_path: 'backbone.layer3'
              io: 'output'
            target:
              is_from_teacher: True
              module_path: 'backbone.layer3'
              io: 'output'
          factor: 1.0
        layer4:
          criterion:
            type: 'MSELoss'
            params:
              reduction: 'sum'
          params:
            input:
              is_from_teacher: False
              module_path: 'backbone.layer4'
              io: 'output'
            target:
              is_from_teacher: True
              module_path: 'backbone.layer4'
              io: 'output'
          factor: 1.0
  stage2:
    num_epochs: 5
    train_data_loader:
      dataset_id: *coco_train
      random_sample: True
      batch_size: 8
      num_workers: 16
      collate_fn: 'coco_seg_collate_fn'
      cache_output:
    teacher:
      adaptations:
      sequential: []
      special:
        type: 'EmptyModule'
        params:
      forward_hook:
        input: []
        output: []
      wrapper:
      requires_grad: True
    student:
      adaptations:
      sequential: []
      frozen_modules: ['backbone.bottleneck_layer.encoder', 'backbone.bottleneck_layer.entropy_bottleneck']
      forward_hook:
        input: []
        output: []
      wrapper: 'DistributedDataParallel'
      requires_grad: True
    apex:
      requires: False
      opt_level: '01'
    optimizer:
      type: 'SGD'
      params:
        lr: 0.0025
        momentum: 0.9
        weight_decay: 0.0001
      module_wise_params:
        - module: 'backbone'
          params: {}
        - module: 'classifier'
          params: {}
        - module: 'aux_classifier'
          params:
            lr: 0.025
    scheduler:
      type: 'custom_lambda_lr'
      params:
        num_iterations: None
        num_epochs: *num_epochs
        factor: 0.9
      scheduling_step: 1
    criterion:
      type: 'GeneralizedCustomLoss'
      func2extract_org_loss: 'extract_org_segment_loss'
      org_term:
        criterion:
          type: 'CrossEntropyLoss'
          params:
            reduction: 'mean'
            ignore_index: 255
        factor: 1.0
      sub_terms:

test:
  test_data_loader:
    dataset_id: *coco_val
    random_sample: False
    batch_size: 1
    num_workers: 16
    collate_fn: 'coco_seg_eval_collate_fn'
