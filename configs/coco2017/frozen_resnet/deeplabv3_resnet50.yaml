datasets:
  coco2017:
    name: &dataset_name 'coco2017'
    type: 'cocodetect'
    root: &root_dir !join ['~/dataset/', *dataset_name]
    splits:
      train:
        dataset_id: &coco_train !join [*dataset_name, '/train']
        images: !join [*root_dir, '/train2017']
        annotations: !join [*root_dir, '/annotations/instances_train2017.json']
        annotated_only: True
        is_segment: True
        random_horizontal_flip: 0.5
        transform_params:
          - type: 'CustomRandomResize'
            params:
              min_size: 260
              max_size: 1040
          - type: 'CustomRandomHorizontalFlip'
            params:
              p: 0.5
          - type: 'CustomRandomCrop'
            params:
              size: 480
          - &totensor
            type: 'CustomToTensor'
            params:
          - &normalize
            type: 'CustomNormalize'
            params:
              mean: [0.485, 0.456, 0.406]
              std: [0.229, 0.224, 0.225]
      val:
        dataset_id: &coco_val !join [*dataset_name, '/val']
        images: !join [*root_dir, '/val2017']
        annotations: !join [*root_dir, '/annotations/instances_val2017.json']
        annotated_only: False
        is_segment: True
        transform_params:
          - type: 'CustomRandomResize'
            params:
              min_size: 520
              max_size: 520
          - *totensor
          - *normalize

models:
  model:
    name: 'deeplabv3_resnet50'
    params:
      pretrained: False
      progress: True
      pretrained_backbone: True
      aux_loss: True
    ckpt: !join ['./coco/frozen_resnet/deeplabv3_resnet50.pt']

train:
  log_freq: 1000
  num_epochs: &num_epochs 30
  train_data_loader:
    dataset_id: *coco_train
    random_sample: True
    batch_size: 4
    num_workers: 16
    collate_fn: 'coco_seg_collate_fn'
    cache_output:
  val_data_loader:
    dataset_id: *coco_val
    random_sample: False
    batch_size: 1
    num_workers: 16
    collate_fn: 'coco_seg_eval_collate_fn'
  model:
    adaptations:
    sequential: []
    forward_hook:
      input: []
      output: []
    wrapper: 'DistributedDataParallel'
    requires_grad: True
  apex:
    requires: False
    opt_level: '01'
  optimizer:
    type: 'SGD'
    params:
      lr: 0.0025
      momentum: 0.9
      weight_decay: 0.0001
    module_wise_params:
      - module: 'backbone'
        params: {}
      - module: 'classifier'
        params: {}
      - module: 'aux_classifier'
        params:
          lr: 0.025
  scheduler:
    type: 'custom_lambda_lr'
    params:
      dataset_size: None
      num_epochs: *num_epochs
      factor: 0.9
  criterion:
    type: 'GeneralizedCustomLoss'
    func2extract_org_loss: 'extract_org_segment_loss'
    org_term:
      criterion:
        type: 'CrossEntropyLoss'
        params:
          reduction: 'mean'
          ignore_index: 255
      factor: 1.0
    sub_terms:

test:
  test_data_loader:
    dataset_id: *coco_val
    random_sample: False
    batch_size: 1
    num_workers: 16
    collate_fn: 'coco_seg_eval_collate_fn'
